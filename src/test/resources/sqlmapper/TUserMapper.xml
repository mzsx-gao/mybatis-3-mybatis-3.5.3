<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="my_demo.mapper.TUserMapper">

    <resultMap id="BaseResultMap" type="TUser">
        <id column="id" property="id"/>
        <result column="userName" property="userName"/>
        <result column="realName" property="realName"/>
        <result column="sex" property="sex"/>
        <result column="mobile" property="mobile"/>
        <result column="email" property="email"/>
        <result column="note" property="note"/>
    </resultMap>

    <sql id="Base_Column_List">
		id,sex, userName, realName,  mobile, email, note,position_id
	</sql>

    <select id="selectByPrimaryKey" resultType="TUser">
		select
		id, userName, realName, sex, mobile, email, note
		from t_user
		where id = #{id,jdbcType=INTEGER}
	</select>

    <select id="selectAll" resultType="TUser">
		select
		id, userName, realName, sex, mobile, email, note
		from t_user
	</select>

    <select id="selectByEmailAndSex1" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="Base_Column_List"/>
        from t_user a
        where a.email like CONCAT('%', #{email}, '%') and
        a.sex = #{sex}
    </select>

    <select id="selectByEmailAndSex2" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_user a
        where a.email like CONCAT('%', #{email}, '%') and
        a.sex = #{sex}
    </select>


    <select id="selectByEmailAndSex3" resultMap="BaseResultMap"
            parameterType="my_demo.entity.EmailSexBean">
        select
        <include refid="Base_Column_List"/>
        from t_user a
        where a.email like CONCAT('%', #{email}, '%') and
        a.sex = #{sex}
    </select>


    <!-- 关联查询 -->
    <!-- 第一种方式 -->
    <resultMap id="userAndJobs1" extends="BaseResultMap" type="TUser">
        <collection property="jobs" ofType="my_demo.entity.TJobHistory">
            <result column="comp_name" property="compName" jdbcType="VARCHAR"/>
            <result column="years" property="years" jdbcType="INTEGER"/>
            <result column="title" property="title" jdbcType="VARCHAR"/>
        </collection>
    </resultMap>

    <select id="selectUserJobs1" resultMap="userAndJobs1">
		SELECT a.id, a.userName, a.realName, a.sex, a.mobile, b.comp_name, b.years, b.title
        FROM t_user a, t_job_history b
        WHERE a.id = b.user_id
	</select>

    <!-- 第二种方式 -->
    <resultMap id="userAndJobs2" extends="BaseResultMap" type="TUser">
        <!--<collection property="jobs" column="id"-->
                    <!--select="my_demo.mapper.TJobHistoryMapper.selectByUserId"/>-->
        <!-- 懒加载方式 -->
        <collection property="jobs" column="id" fetchType="lazy"
                    select="my_demo.mapper.TJobHistoryMapper.selectByUserId"/>
    </resultMap>
    <select id="selectUserJobs2" resultMap="userAndJobs2">
		SELECT id,userName,realName,sex,mobile FROM t_user
	</select>

    <!-- 开启二级缓存 -->
    <cache/>

</mapper>
